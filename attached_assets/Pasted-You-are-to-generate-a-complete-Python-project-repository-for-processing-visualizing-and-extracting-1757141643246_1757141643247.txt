You are to generate a complete Python project repository for processing, visualizing, and extracting features from light curves (.npz files).
This project should follow clear modular structure, and must be well-documented so that I can easily understand and extend the code.


---

ðŸ“‚ Project Requirements

1. Repository Structure

lightcurve_project/
â”‚â”€â”€ README.md                # Full documentation
â”‚â”€â”€ requirements.txt         # Python dependencies
â”‚â”€â”€ main.py                  # CLI entry point
â”‚â”€â”€ src/
â”‚   â”œâ”€â”€ _init_.py
â”‚   â”œâ”€â”€ data_loader.py       # load & preprocess curves
â”‚   â”œâ”€â”€ visualization.py     # plotting curves & features
â”‚   â”œâ”€â”€ feature_extraction.py# extract 800+ features
â”‚   â”œâ”€â”€ feature_pruning.py   # manual pruning utilities
â”‚â”€â”€ notebooks/
â”‚   â”œâ”€â”€ exploration.ipynb    # interactive analysis
â”‚â”€â”€ data/
â”‚   â”œâ”€â”€ sample_curves/       # placeholder npz files


---

2. Core Functionalities

a) Data Loading & Preprocessing

Create a function load_npz_curve(file_path) that loads .npz files (containing time, flux, flux_err).

Integrate the preprocessing steps from this function my friend already wrote:


def preprocess_lightcurve(lc, period=None, epoch_time=None):
    """
    Ultra-clean processing for light curves.
    """
    # 1. Remove NaNs + normalize
    # 2. Flatten stellar variability
    # 3. Mask good quality points
    # 4. Sigma-clip outliers
    # 5. Fold if period & epoch provided
    # 6. Bin (5 min bins)
    # 7. Normalize flux (zero mean, unit variance)

Make sure preprocessing is optional (can load raw or cleaned curves).



---

b) Visualization

In visualization.py, provide:

plot_lightcurve(time, flux, flux_err) â†’ basic curve plotting.

plot_folded_curve(time, flux, period) â†’ folded light curve visualization.

plot_feature_distribution(features) â†’ histograms/boxplots of features.



---

c) Feature Extraction

In feature_extraction.py:

Implement extract_features(time, flux, flux_err) that computes ~800 features.
(Use packages like tsfresh, catch22, feets, or custom functions).

Features should include:

Statistical (mean, variance, skew, kurtosis, percentiles).

Time-domain (autocorrelation, periodogram peaks).

Frequency-domain (FFT coefficients, spectral entropy).

Transit-specific (depth, duration, slope, symmetry).


Store results in a pandas DataFrame.



---

d) Feature Pruning

In feature_pruning.py:

Implement manual_prune(features_df, selected_features) â†’ keeps only manually chosen features.

Provide a simple CLI menu in main.py so I can:

1. See all extracted features.


2. Select which features to keep/remove.


3. Save pruned features to CSV.





---

e) Main Pipeline (main.py)

Command-line interface with argparse:

--load <file> â†’ load and preprocess a curve.

--visualize â†’ show curve plot.

--extract â†’ extract all features.

--prune â†’ interactive pruning.

--save <file> â†’ save feature DataFrame to disk.




---

3. Documentation

README.md must explain:

How to install dependencies (requirements.txt).

How to run preprocessing, visualization, and feature extraction.

How to prune features manually.


Include usage examples.



---

4. Dependencies

Add to requirements.txt:

numpy
scipy
pandas
matplotlib
seaborn
tsfresh
astropy
lightkurve


---

5. Stretch Goals (if possible)

Add a notebooks/exploration.ipynb with example workflow:

1. Load .npz file.


2. Visualize curve.


3. Extract features.


4. Prune features.


5. Save dataset.





---

ðŸš€ Deliverable

Generate the entire project repo as if itâ€™s ready to git clone and run.
Keep the code simple, well-structured, and cleanly documented with comments.
My goal is to quickly learn the structure, run it on my .npz light curves, and then extend it.